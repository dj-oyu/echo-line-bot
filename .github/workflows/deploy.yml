name: Deploy LINE AI Chatbot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: env
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install Python dependencies
      run: |
        uv sync
        
    - name: Build Lambda Layer
      run: |
        chmod +x scripts/build-layer.sh
        ./scripts/build-layer.sh
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Install CDK dependencies
      run: |
        cd cdk
        pnpm install
        
    - name: Build CDK
      run: |
        cd cdk
        pnpm run build
        
    - name: Run CDK tests
      run: |
        cd cdk
        pnpm test
        
    - name: CDK Synthesize
      run: |
        cd cdk
        pnpm run cdk synth

  deploy:
    runs-on: ubuntu-latest
    environment: env
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Install Python dependencies
      run: |
        uv sync
        
    - name: Build Lambda Layer
      run: |
        chmod +x scripts/build-layer.sh
        ./scripts/build-layer.sh
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Install CDK dependencies
      run: |
        cd cdk
        pnpm install
        
    - name: Build CDK
      run: |
        cd cdk
        pnpm run build
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Update or Create Secrets
      run: |
        aws secretsmanager update-secret --secret-id LINE_CHANNEL_SECRET --secret-string '${{ secrets.CHANNEL_SECRET }}' || 
        aws secretsmanager create-secret --name LINE_CHANNEL_SECRET --secret-string '${{ secrets.CHANNEL_SECRET }}'
        aws secretsmanager update-secret --secret-id LINE_CHANNEL_ACCESS_TOKEN --secret-string '${{ secrets.CHANNEL_ACCESS_TOKEN }}' || 
        aws secretsmanager create-secret --name LINE_CHANNEL_ACCESS_TOKEN --secret-string '${{ secrets.CHANNEL_ACCESS_TOKEN }}'
        aws secretsmanager update-secret --secret-id SAMBA_NOVA_API_KEY --secret-string '${{ secrets.SAMBA_NOVA_API_KEY }}' || 
        aws secretsmanager create-secret --name SAMBA_NOVA_API_KEY --secret-string '${{ secrets.SAMBA_NOVA_API_KEY }}'
        aws secretsmanager update-secret --secret-id XAI_API_KEY --secret-string '{"XAI_API_KEY":"${{ secrets.XAI_API_KEY }}"}' || 
        aws secretsmanager create-secret --name XAI_API_KEY --secret-string '{"XAI_API_KEY":"${{ secrets.XAI_API_KEY }}"}'
        
    - name: Deploy to AWS
      run: |
        cd cdk
        pnpm run cdk deploy -- --require-approval never
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "üöÄ Deployment successful!"
        echo "API Gateway URL: $(aws cloudformation describe-stacks --stack-name LineEchoStack --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text)"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        exit 1